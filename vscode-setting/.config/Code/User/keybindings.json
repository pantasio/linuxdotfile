// sample commend stype
// todo
// ! warning
// Place your key bindings in this file to override the defaults
/*
    In Visual mode:    
    - Ctrl+ j  Move line down
    - Ctrl+ k  Move line up



*/

/* -------------------------------------------------------
?     ===== sample keybinding =========
  *  Multi command
  {
  "key": "ctrl+alt+c",
  "command": "runCommands",
  "args": {
    "commands": [
      "editor.action.copyLinesDownAction",
      "cursorUp",
      "editor.action.addCommentLine",
      "cursorDown"
    ]
  }
  },
  *  Multi command with argument
  {
  "key": "ctrl+n",
  "command": "runCommands",
  "args": {
    "commands": [
      {
        "command": "workbench.action.files.newUntitledFile",
        "args": {
          "languageId": "typescript"
        }
      },
      {
        "command": "editor.action.insertSnippet",
        "args": {
          "langId": "typescript",
          "snippet": "class ${1:ClassName} {\n\tconstructor() {\n\t\t$0\n\t}\n}"
        }
      }
    ]
  }
  },
*/

/*
?     ===== sample keybinding =========
-----------------  END ---------------------------------*/

[
  /* -------------------------------------------------------
  ?     ===== Disable keybinding =========
     
  */
  {
    "key": "ctrl+o",
    "command": "-workbench.action.files.openFile",
    "when": "true"
  },
  // Disable create new vscode
  {
    "key": "ctrl+shift+n",
    "command": "-workbench.action.newWindow"
  },

  /*
  ?     ===== Disable keybinding =========
  -----------------  END ---------------------------------*/

  //#####Begin{
  // In Visual mode only
  // unkeyblinding alt+ down or up
  // Use ctrl+j or k to move line down or up
  {
    "key": "ctrl+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+down",
    "command": "-editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // {
  //     "key": "alt+k",
  //     "command": "-keybindings.editor.recordSearchKeys",
  //     "when": "inKeybindings && inKeybindingsSearch"
  // },
  {
    "key": "ctrl+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+up",
    "command": "-editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  //#################################################################End}
  //#####Begin{
  {
    "key": "ctrl+f2",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // Disable Enter to rename file
  {
    "key": "enter",
    "command": "-renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "enter",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  //#################################################################End}
  //
  //
  //#####BEGIN{
  // {
  //     "key": "ctrl+h",
  //     "command": "workbench.action.focusLeftGroup",
  //     "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
  // },
  // {
  //     "key": "ctrl+h",
  //     "command": "list.collapse",
  //     "when": "listFocus && !inputFocus"
  // },
  // {
  //     "key": "ctrl+l",
  //     "command": "workbench.action.focusRightGroup",
  //     "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
  // },
  // {
  //     "key": "ctrl+l",
  //     "command": "list.expand",
  //     "when": "listFocus && !inputFocus"
  // },
  //#################################################################End}
  //
  // In Editor, toogle open/close filesExplorer on left side
  {
    "key": "ctrl+right",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "editorTextFocus"
  },
  //
  //
  // In selete option, move up/down to chose the option
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  //
  //
  // {
  //     "key": "ctrl+shift+`",
  //     "command": "workbench.action.terminal.toggleMaximizedTerminal",
  //     "when": "terminal.active"
  // },
  /* -------------------------------------------------------
       ?===== Control terminal =========
  */
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+shift+`",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  /*
       ?===== Control terminal =========
  -----------------  END ---------------------------------*/

  /* -------------------------------------------------------
  ?     ===== Copy Cut Paste =========
  Don't use Ctrl+c Ctrl+x Ctrl+v, We use: Ctrl+Shift+c ...
  */
  // 2 way to copy: selete text in visual mode, use yang (y) or ctrl+shift+C
  {
    "key": "ctrl+shift+c",
    "command": "runCommands",
    "args": {
      "commands": ["editor.action.clipboardCopyAction", "extension.vim_escape"]
    }
  },
  // Paste under cursor
  {
    "key": "ctrl+shift+v",
    "command": "runCommands",
    "args": {
      "commands": ["editor.action.clipboardPasteAction", "extension.vim_escape"]
    }
  },
  {
    "key": "ctrl+shift+x",
    "command": "runCommands",
    "args": {
      "commands": ["editor.action.clipboardCutAction", "extension.vim_escape"]
    }
  },
  // Disable key
  {
    "key": "ctrl+c",
    "command": "-editor.action.clipboardCopyAction"
  },
  {
    "key": "ctrl+v",
    "command": "-editor.action.clipboardPasteAction"
  },
  {
    "key": "shift+insert",
    "command": "-editor.action.clipboardPasteAction"
  },
  {
    "key": "ctrl+x",
    "command": "-editor.action.clipboardCutAction"
  },

  /*
  ?     ===== Copy Cut Paste =========
  -----------------  END ---------------------------------*/

  //
  //
  /*Dont know what to do*/
  {
    "key": "ctrl+b",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "!editorTextFocus"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },

  /*
    2 Way to Copy Line Down
    */
  {
    "key": "ctrl+alt+j",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+down",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+k",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+up",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // DO NOTHING
  // ctrl+alt+shift
  {
    "key": "ctrl+shift+alt+down",
    "command": "-editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+alt+up",
    "command": "-editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  //
  // make 2 way to move editor to previousGroup
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "ctrl+alt+left",
    "command": "workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "ctrl+alt+right",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  //
  //
  //
  /* {
    "key": "alt+q", // whatever keybinding you want
    "command": "editor.action.insertSnippet",
    "args": {
      "name": "Variable Declaration Comment"
    },
    "when": "editorTextFocus && vim.mode == 'Normal'"
  },
 */
  //
  //
  // How to use: Move Cursor to the line -> Ctrl+shift+p -> Ctrl+Enter

  //============
  // Run current line in a terminal
  {
    "key": "ctrl+enter",
    "command": "workbench.action.terminal.runSelectedText",
    "when": "editorTextFocus && editorHasSelection"
  },
  // make it better when seleted = 0 run this line in terminal
  // I use oO to create new line
  {
    "key": "ctrl+enter",
    "command": "-editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "-editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  /*
  ?     ===== make it harder to close file =========
  Disable Close VScode by press:
        - Ctrl+Shift+w
        - Alt+f4
  If you wanna close use i3wm: Ctrl+shift+q
  */
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  {
    "key": "alt+f4",
    "command": "-workbench.action.closeWindow"
  },
  // Close editor
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeActiveEditor"
  },
  // Make hard to quit VScode
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  /*
  ?     ===== make it harder to close file =========
  -----------------  END ---------------------------------*/

  // Replace in File
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.replaceInFiles"
  },
  // Use tab to selete Suggestion
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  /* -------------------------------------------------------
  ? START     ===== Dont Use Advanced New File =========
       
  */
  
       
  /*
  ?     ===== Dont Use Advanced New File =========
  -----------------  END ---------------------------------*/
  
  /* // Use advanceNewFile
  {
    "key": "ctrl+n",
    "command": "-extension.vim_ctrl+n",
    "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
  },
  {
    "key": "ctrl+n",
    "command": "newFile.createNewFile"
  },
  {
    "key": "ctrl+alt+n",
    "command": "-newFile.createNewFile"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  }, */
  // I still dont know setting Ctrl+h to delete charactor in insert mode
  {
    "key": "ctrl+h",
    "command": "extension.vim_ctrl+h",
    "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
  },
  {
    "key": "ctrl+h",
    "command": "-extension.vim_ctrl+h",
    "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
  },

  /* -------------------------------------------------------
  ?     ===== File Utils keybinding =========
       
  */
  {
    "key": "ctrl+d",
    "command": "fileutils.removeFile",
    "when": "filesExplorerFocus"
  },
  {
    "key": "ctrl+r",
    "command": "fileutils.renameFile",
    "when": "filesExplorerFocus"
  },
  {
    "key": "ctrl+n",
    "command": "fileutils.newFile"
  },
  {
    "key": "ctrl+x",
    "command": "fileutils.moveFile",
    "when": "filesExplorerFocus"
  },

  /*
  ?     ===== File Utils keybinding =========
  -----------------  END ---------------------------------*/

  /* -------------------------------------------------------
  ?     ===== Swap default comment line with block comment =========
       
  */
  {
    "key": "ctrl+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+/",
    "command": "-editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Disable
  {
    "key": "ctrl+shift+a",
    "command": "-editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  }
  /*
  ?     ===== Swap default comment line with block comment =========
  -----------------  END ---------------------------------*/

  // {
  //   "key": "ctrl+j",
  //   "command": "-workbench.action.togglePanel"
  // },
  // // Ctrl+ j/k to move cursor left/right in terminal workspace
  // // Up: \u001b[{n}A
  // // Down: \u001b[{n}B
  // // Right: \u001b[{n}C
  // // Left: \u001b[{n}D

  // {
  //   "key": "ctrl+j",
  //   "command": "workbench.action.terminal.sendSequence",
  //   "args": {
  //     "text": "\u001b[{n}D"
  //   },
  //   "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  // }
]
